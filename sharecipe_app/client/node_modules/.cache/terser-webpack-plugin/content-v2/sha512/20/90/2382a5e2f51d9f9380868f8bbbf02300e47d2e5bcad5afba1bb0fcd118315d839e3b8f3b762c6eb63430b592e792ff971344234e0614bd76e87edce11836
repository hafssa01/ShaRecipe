{"map":"{\"version\":3,\"sources\":[\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/Register.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ForgotPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ResetPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/Navscroll.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/pages/Homepage.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/App.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/index.js\"],\"names\":[\"RegisterForm\",\"ForgotPasswordForm\",\"formData\",\"setFormData\",\"useState\",\"email\",\"errors\",\"setErrors\",\"showToast\",\"setShowToast\",\"toastMessage\",\"setToastMessage\",\"validate\",\"newErrors\",\"test\",\"React\",\"createElement\",\"className\",\"Card\",\"style\",\"width\",\"maxWidth\",\"Form\",\"onSubmit\",\"e\",\"preventDefault\",\"Object\",\"keys\",\"length\",\"console\",\"log\",\"Group\",\"controlId\",\"Label\",\"Control\",\"type\",\"name\",\"value\",\"onChange\",\"target\",\"[object Object]\",\"isInvalid\",\"Feedback\",\"Link\",\"to\",\"Button\",\"variant\",\"ToastContainer\",\"position\",\"Toast\",\"onClose\",\"show\",\"delay\",\"autohide\",\"Header\",\"Body\",\"ResetPasswordForm\",\"NavScrollExample\",\"Navbar\",\"expand\",\"Container\",\"fluid\",\"Brand\",\"href\",\"Toggle\",\"aria-controls\",\"Collapse\",\"id\",\"Nav\",\"navbarScroll\",\"borderRadius\",\"marginRight\",\"HomePage\",\"App\",\"Home\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Col, Row, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\nimport { FaGoogle } from 'react-icons/fa';\\n\\nconst RegisterForm = () => {\\n  const [formData, setFormData] = useState({\\n    firstName: '',\\n    lastName: '',\\n    email: '',\\n    password: '',\\n    confirmPassword: '',\\n    sex: '',\\n    country: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    // Prevent non-alphabetic characters for first name, last name, and country\\n    if (\\n      name === 'firstName' ||\\n      name === 'lastName' ||\\n      name === 'country'\\n    ) {\\n      const alphabeticValue = value.replace(/[^a-zA-Z\\\\s]+/g, '');\\n      setFormData({ ...formData, [name]: alphabeticValue });\\n    } else {\\n      setFormData({ ...formData, [name]: value });\\n    }\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n  \\n    // Check for required fields and validate format\\n    if (!formData.firstName.trim()) {\\n      newErrors.firstName = 'First name is required';\\n    }\\n    if (!formData.lastName.trim()) {\\n      newErrors.lastName = 'Last name is required';\\n    }\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n  \\n    // Password and confirm password validation\\n    if (!formData.password || formData.password.length < 8) {\\n      newErrors.password = 'Password must be at least 8 characters long';\\n    }\\n    if (formData.password !== formData.confirmPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n  \\n    if (!formData.sex) {\\n      newErrors.sex = 'Please select your sex';\\n    }\\n  \\n    if (!formData.country.trim()) {\\n      newErrors.country = 'Please select your country';\\n    }\\n  \\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n  \\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Registration successful!');\\n    }\\n  };\\n  \\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '600px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Join us!</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Row>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"firstName\\\">\\n                <Form.Label>First Name</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"firstName\\\"\\n                  value={formData.firstName}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.firstName}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.firstName}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"lastName\\\">\\n                <Form.Label>Last Name</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"lastName\\\"\\n                  value={formData.lastName}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.lastName}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.lastName}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Form.Group controlId=\\\"email\\\" className=\\\"mt-3\\\">\\n            <Form.Label>Email</Form.Label>\\n            <Form.Control\\n              type=\\\"email\\\"\\n              name=\\\"email\\\"\\n              value={formData.email}\\n              onChange={handleChange}\\n              isInvalid={!!errors.email}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.email}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n\\n          <Row className=\\\"mt-3\\\">\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"password\\\">\\n                <Form.Label>Password</Form.Label>\\n                <Form.Control\\n                  type=\\\"password\\\"\\n                  name=\\\"password\\\"\\n                  value={formData.password}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.password}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.password}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"confirmPassword\\\">\\n                <Form.Label>Confirm Password</Form.Label>\\n                <Form.Control\\n                  type=\\\"password\\\"\\n                  name=\\\"confirmPassword\\\"\\n                  value={formData.confirmPassword}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.confirmPassword}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.confirmPassword}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Row className=\\\"mt-3\\\">\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"sex\\\">\\n                <Form.Label>Sex</Form.Label>\\n                <Form.Select\\n                  name=\\\"sex\\\"\\n                  value={formData.sex}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.sex}\\n                >\\n                  <option value=\\\"\\\">Select</option>\\n                  <option value=\\\"male\\\">Male</option>\\n                  <option value=\\\"female\\\">Female</option>\\n                  <option value=\\\"other\\\">Other</option>\\n                </Form.Select>\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.sex}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"country\\\">\\n                <Form.Label>Country</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"country\\\"\\n                  value={formData.country}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.country}/>\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.country}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Register\\n          </Button>\\n\\n          {/* Login link */}\\n          <p className=\\\"text-center mt-3\\\">\\n            Already have an account? <a href=\\\"/login\\\" className=\\\"text-primary\\\">Login</a>\\n          </p>\\n\\n          {/* Divider with Google sign-up */}\\n          <hr />\\n          <Button className=\\\"w-100 mt-2 btn-light border\\\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\\n            <FaGoogle className=\\\"me-2\\\" /> Sign up with Google\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide>\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default RegisterForm;\\n\",\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card,} from \\\"react-bootstrap\\\";\\nimport { Link } from 'react-router-dom';\\n\\nconst ForgotPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    email: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Password reset email sent!');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Forgot Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"email\\\">\\n            <Form.Label>Email</Form.Label>\\n            <Form.Control\\n              type=\\\"email\\\"\\n              name=\\\"email\\\"\\n              value={formData.email}\\n              onChange={handleChange}\\n              isInvalid={!!errors.email}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.email}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Link to=\\\"/reset-passord\\\">\\n            <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n              Forgot Password\\n          </Button>\\n          </Link>\\n\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ForgotPasswordForm;\\n\",\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\n\\nconst ResetPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    newPassword: '',\\n    confirmPassword: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n\\n    if (!formData.newPassword) {\\n      newErrors.newPassword = 'New password is required';\\n    } else if (formData.newPassword.length < 8) {\\n      newErrors.newPassword = 'Password must be at least 8 characters';\\n    }\\n\\n    if (formData.confirmPassword !== formData.newPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Password reset successfully!');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Reset Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"newPassword\\\">\\n            <Form.Label>New Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"newPassword\\\"\\n              value={formData.newPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.newPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.newPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Form.Group controlId=\\\"confirmPassword\\\" className=\\\"mt-3\\\">\\n            <Form.Label>Confirm Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"confirmPassword\\\"\\n              value={formData.confirmPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.confirmPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.confirmPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Reset Password\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ResetPasswordForm;\\n\",\"import Button from 'react-bootstrap/Button';\\nimport Container from 'react-bootstrap/Container';\\nimport Nav from 'react-bootstrap/Nav';\\nimport Navbar from 'react-bootstrap/Navbar';\\nimport React from 'react';\\n\\nfunction NavScrollExample() {\\n  return (\\n    <Navbar expand=\\\"lg\\\" className=\\\"bg-body-tertiary\\\">\\n      <Container fluid>\\n        <Navbar.Brand href=\\\"#\\\">ShaRecipe</Navbar.Brand>\\n        <Navbar.Toggle aria-controls=\\\"navbarScroll\\\" />\\n        <Navbar.Collapse id=\\\"navbarScroll\\\">\\n          <Nav className=\\\"mx-auto my-2 my-lg-0\\\" navbarScroll>\\n            <Nav.Link href=\\\"#home\\\">Home</Nav.Link>\\n            <Nav.Link href=\\\"#recipes\\\">Recipes</Nav.Link>\\n          </Nav>\\n          <div className=\\\"d-flex\\\">\\n            <Button \\n              variant=\\\"outline-dark\\\" \\n              style={{ borderRadius: '12px', marginRight: '8px' }}\\n            >\\n              Sign In\\n            </Button>\\n            <Button \\n              variant=\\\"dark\\\" \\n              style={{ borderRadius: '12px' }}\\n            >\\n              Sign Up\\n            </Button>\\n          </div>\\n        </Navbar.Collapse>\\n      </Container>\\n    </Navbar>\\n  );\\n}\\n\\nexport default NavScrollExample;\\n\",\"import React from 'react';\\nimport NavScrollExample from '../components/Navscroll';\\nimport ForgotPasswordForm from '../components/ForgotPassword';\\n\\nfunction HomePage() {\\n  return (\\n    <div>\\n      <NavScrollExample />\\n      <ForgotPasswordForm></ForgotPasswordForm>\\n \\n    </div>\\n  );\\n}\\n\\nexport default HomePage;\\n\",\"import './App.css';\\nimport React from 'react';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport RegisterForm from './components/Register';\\nimport ForgotPasswordForm from './components/ForgotPassword';\\nimport ResetPasswordForm from './components/ResetPassword';\\nimport Home from './pages/Homepage'\\nimport { Route, Router, Routes } from 'react-router-dom';\\n\\n\\nfunction App() {\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <Home></Home>\\n    </div>\\n\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{45:function(e,a,t){e.exports=t(60)},53:function(e,a,t){},60:function(e,a,t){\"use strict\";t.r(a);var n=t(0),l=t.n(n),r=t(41),c=t.n(r),m=(t(53),t(54),t(65)),s=t(64),o=(t(62),t(42),t(38)),i=t(63),u=t(66);t(44);var d=t(37);var E=()=>{const[e,a]=Object(n.useState)({email:\"\"}),[t,r]=Object(n.useState)({}),[c,E]=Object(n.useState)(!1),[p,v]=Object(n.useState)(\"\"),b=e=>{const a={};return e.email&&/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e.email)||(a.email=\"Invalid email address\"),a};return l.a.createElement(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\"},l.a.createElement(m.a,{className:\"p-4\",style:{width:\"100%\",maxWidth:\"400px\"}},l.a.createElement(\"h2\",{className:\"text-center mb-4\"},\"Forgot Password\"),l.a.createElement(s.a,{onSubmit:a=>{a.preventDefault();const t=b(e);r(t),0===Object.keys(t).length&&(console.log(\"Form submitted successfully:\",e),E(!0),v(\"Password reset email sent!\"))}},l.a.createElement(s.a.Group,{controlId:\"email\"},l.a.createElement(s.a.Label,null,\"Email\"),l.a.createElement(s.a.Control,{type:\"email\",name:\"email\",value:e.email,onChange:t=>{const{name:n,value:l}=t.target;a({...e,[n]:l});const c=b({...e,[n]:l});r(c)},isInvalid:!!t.email}),l.a.createElement(s.a.Control.Feedback,{type:\"invalid\"},t.email)),l.a.createElement(d.a,{to:\"/reset-passord\"},l.a.createElement(o.a,{className:\"mt-4 w-100\",variant:\"primary\",type:\"submit\"},\"Forgot Password\")))),l.a.createElement(i.a,{position:\"top-end\",className:\"p-3\"},l.a.createElement(u.a,{onClose:()=>E(!1),show:c,delay:3e3,autohide:!0},l.a.createElement(u.a.Header,null,l.a.createElement(\"strong\",{className:\"me-auto\"},\"Success\")),l.a.createElement(u.a.Body,null,p))))};var p=t(43),v=t(34),b=t(25);var g=function(){return l.a.createElement(b.a,{expand:\"lg\",className:\"bg-body-tertiary\"},l.a.createElement(p.a,{fluid:!0},l.a.createElement(b.a.Brand,{href:\"#\"},\"ShaRecipe\"),l.a.createElement(b.a.Toggle,{\"aria-controls\":\"navbarScroll\"}),l.a.createElement(b.a.Collapse,{id:\"navbarScroll\"},l.a.createElement(v.a,{className:\"mx-auto my-2 my-lg-0\",navbarScroll:!0},l.a.createElement(v.a.Link,{href:\"#home\"},\"Home\"),l.a.createElement(v.a.Link,{href:\"#recipes\"},\"Recipes\")),l.a.createElement(\"div\",{className:\"d-flex\"},l.a.createElement(o.a,{variant:\"outline-dark\",style:{borderRadius:\"12px\",marginRight:\"8px\"}},\"Sign In\"),l.a.createElement(o.a,{variant:\"dark\",style:{borderRadius:\"12px\"}},\"Sign Up\")))))};var y=function(){return l.a.createElement(\"div\",null,l.a.createElement(g,null),l.a.createElement(E,null))};var f=function(){return l.a.createElement(\"div\",{className:\"App\"},l.a.createElement(y,null))};c.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(f,null)))}},[[45,1,2]]]);","extractedComments":[]}