{"map":"{\"version\":3,\"sources\":[\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ResetPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/App.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/index.js\"],\"names\":[\"ResetPasswordForm\",\"formData\",\"setFormData\",\"useState\",\"newPassword\",\"confirmPassword\",\"errors\",\"setErrors\",\"showToast\",\"setShowToast\",\"toastMessage\",\"setToastMessage\",\"handleChange\",\"e\",\"name\",\"value\",\"target\",\"[object Object]\",\"newErrors\",\"validate\",\"length\",\"React\",\"createElement\",\"className\",\"Card\",\"style\",\"width\",\"maxWidth\",\"Form\",\"onSubmit\",\"preventDefault\",\"Object\",\"keys\",\"console\",\"log\",\"Group\",\"controlId\",\"Label\",\"Control\",\"type\",\"onChange\",\"isInvalid\",\"Feedback\",\"Button\",\"variant\",\"ToastContainer\",\"position\",\"Toast\",\"onClose\",\"show\",\"delay\",\"autohide\",\"Header\",\"Body\",\"App\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\n\\nconst ResetPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    newPassword: '',\\n    confirmPassword: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n\\n    if (!formData.newPassword) {\\n      newErrors.newPassword = 'New password is required';\\n    } else if (formData.newPassword.length < 8) {\\n      newErrors.newPassword = 'Password must be at least 8 characters';\\n    }\\n\\n    if (formData.confirmPassword !== formData.newPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Password reset successfully!');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Reset Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"newPassword\\\">\\n            <Form.Label>New Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"newPassword\\\"\\n              value={formData.newPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.newPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.newPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Form.Group controlId=\\\"confirmPassword\\\" className=\\\"mt-3\\\">\\n            <Form.Label>Confirm Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"confirmPassword\\\"\\n              value={formData.confirmPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.confirmPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.confirmPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Reset Password\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ResetPasswordForm;\\n\",\"import './App.css';\\nimport React from 'react';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport RegisterForm from './components/Register';\\nimport ForgotPasswordForm from './components/ForgotPassword';\\nimport ResetPasswordForm from './components/ResetPassword';\\n\\nfunction App() {\\n\\n  return (\\n    <div className=\\\"App\\\">\\n          \\n          <ResetPasswordForm/>\\n    </div>\\n\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{18:function(e,a,t){e.exports=t(31)},26:function(e,a,t){},31:function(e,a,t){\"use strict\";t.r(a);var s=t(0),n=t.n(s),r=t(9),o=t.n(r),c=(t(26),t(27),t(37)),l=t(36),m=(t(33),t(10),t(38)),d=t(34),w=t(35);var i=()=>{const[e,a]=Object(s.useState)({newPassword:\"\",confirmPassword:\"\"}),[t,r]=Object(s.useState)({}),[o,i]=Object(s.useState)(!1),[u,P]=Object(s.useState)(\"\"),p=t=>{const{name:s,value:n}=t.target;a({...e,[s]:n});const o=E({...e,[s]:n});r(o)},E=e=>{const a={};return e.newPassword?e.newPassword.length<8&&(a.newPassword=\"Password must be at least 8 characters\"):a.newPassword=\"New password is required\",e.confirmPassword!==e.newPassword&&(a.confirmPassword=\"Passwords do not match\"),a};return n.a.createElement(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\"},n.a.createElement(c.a,{className:\"p-4\",style:{width:\"100%\",maxWidth:\"400px\"}},n.a.createElement(\"h2\",{className:\"text-center mb-4\"},\"Reset Password\"),n.a.createElement(l.a,{onSubmit:a=>{a.preventDefault();const t=E(e);r(t),0===Object.keys(t).length&&(console.log(\"Form submitted successfully:\",e),i(!0),P(\"Password reset successfully!\"))}},n.a.createElement(l.a.Group,{controlId:\"newPassword\"},n.a.createElement(l.a.Label,null,\"New Password\"),n.a.createElement(l.a.Control,{type:\"password\",name:\"newPassword\",value:e.newPassword,onChange:p,isInvalid:!!t.newPassword}),n.a.createElement(l.a.Control.Feedback,{type:\"invalid\"},t.newPassword)),n.a.createElement(l.a.Group,{controlId:\"confirmPassword\",className:\"mt-3\"},n.a.createElement(l.a.Label,null,\"Confirm Password\"),n.a.createElement(l.a.Control,{type:\"password\",name:\"confirmPassword\",value:e.confirmPassword,onChange:p,isInvalid:!!t.confirmPassword}),n.a.createElement(l.a.Control.Feedback,{type:\"invalid\"},t.confirmPassword)),n.a.createElement(m.a,{className:\"mt-4 w-100\",variant:\"primary\",type:\"submit\"},\"Reset Password\"))),n.a.createElement(d.a,{position:\"top-end\",className:\"p-3\"},n.a.createElement(w.a,{onClose:()=>i(!1),show:o,delay:3e3,autohide:!0},n.a.createElement(w.a.Header,null,n.a.createElement(\"strong\",{className:\"me-auto\"},\"Success\")),n.a.createElement(w.a.Body,null,u))))};var u=function(){return n.a.createElement(\"div\",{className:\"App\"},n.a.createElement(i,null))};o.a.createRoot(document.getElementById(\"root\")).render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(u,null)))}},[[18,1,2]]]);","extractedComments":[]}