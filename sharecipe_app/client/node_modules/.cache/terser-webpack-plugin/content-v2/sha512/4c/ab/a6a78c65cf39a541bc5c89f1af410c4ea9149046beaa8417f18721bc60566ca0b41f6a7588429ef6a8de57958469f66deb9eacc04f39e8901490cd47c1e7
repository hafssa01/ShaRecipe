{"map":"{\"version\":3,\"sources\":[\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/Register.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ForgotPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ResetPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/RoutesHandler.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/App.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/index.js\"],\"names\":[\"RegisterForm\",\"ForgotPasswordForm\",\"formData\",\"setFormData\",\"useState\",\"email\",\"errors\",\"setErrors\",\"navigate\",\"useNavigate\",\"showToast\",\"setShowToast\",\"toastMessage\",\"setToastMessage\",\"validate\",\"newErrors\",\"test\",\"React\",\"createElement\",\"className\",\"Card\",\"style\",\"width\",\"maxWidth\",\"Form\",\"onSubmit\",\"e\",\"preventDefault\",\"Object\",\"keys\",\"length\",\"console\",\"log\",\"Group\",\"controlId\",\"Label\",\"Control\",\"type\",\"name\",\"value\",\"onChange\",\"target\",\"[object Object]\",\"isInvalid\",\"Feedback\",\"Button\",\"variant\",\"ToastContainer\",\"position\",\"Toast\",\"onClose\",\"show\",\"delay\",\"autohide\",\"Header\",\"Body\",\"ResetPasswordForm\",\"newPassword\",\"confirmPassword\",\"handleChange\",\"RoutesHandler\",\"Routes\",\"Route\",\"path\",\"element\",\"ForgotPassword\",\"ResetPassword\",\"App\",\"Router\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Col, Row, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\n\\nconst RegisterForm = () => {\\n  const [formData, setFormData] = useState({\\n    firstName: '',\\n    lastName: '',\\n    email: '',\\n    password: '',\\n    confirmPassword: '',\\n    sex: '',\\n    country: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    // Prevent non-alphabetic characters for first name, last name, and country\\n    if (\\n      name === 'firstName' ||\\n      name === 'lastName' ||\\n      name === 'country'\\n    ) {\\n      const alphabeticValue = value.replace(/[^a-zA-Z\\\\s]+/g, '');\\n      setFormData({ ...formData, [name]: alphabeticValue });\\n    } else {\\n      setFormData({ ...formData, [name]: value });\\n    }\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n  \\n    // Check for required fields and validate format\\n    if (!formData.firstName.trim()) {\\n      newErrors.firstName = 'First name is required';\\n    }\\n    if (!formData.lastName.trim()) {\\n      newErrors.lastName = 'Last name is required';\\n    }\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n  \\n    // Password and confirm password validation\\n    if (!formData.password || formData.password.length < 8) {\\n      newErrors.password = 'Password must be at least 8 characters long';\\n    }\\n    if (formData.password !== formData.confirmPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n  \\n    if (!formData.sex) {\\n      newErrors.sex = 'Please select your sex';\\n    }\\n  \\n    if (!formData.country.trim()) {\\n      newErrors.country = 'Please select your country';\\n    }\\n  \\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n  \\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Registration successful!');\\n    }\\n  };\\n  \\n          return (\\n            <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n              <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '600px' }}>\\n                <h2 className=\\\"text-center mb-4\\\">Join us!</h2>\\n                <Form onSubmit={handleSubmit}>\\n                  <Row>\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"firstName\\\">\\n                        <Form.Label>First Name</Form.Label>\\n                        <Form.Control\\n                          type=\\\"text\\\"\\n                          name=\\\"firstName\\\"\\n                          value={formData.firstName}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.firstName}\\n                        />\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.firstName}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"lastName\\\">\\n                        <Form.Label>Last Name</Form.Label>\\n                        <Form.Control\\n                          type=\\\"text\\\"\\n                          name=\\\"lastName\\\"\\n                          value={formData.lastName}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.lastName}\\n                        />\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.lastName}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                  </Row>\\n        \\n                  <Form.Group controlId=\\\"email\\\" className=\\\"mt-3\\\">\\n                    <Form.Label>Email</Form.Label>\\n                    <Form.Control\\n                      type=\\\"email\\\"\\n                      name=\\\"email\\\"\\n                      value={formData.email}\\n                      onChange={handleChange}\\n                      isInvalid={!!errors.email}\\n                    />\\n                    <Form.Control.Feedback type=\\\"invalid\\\">\\n                      {errors.email}\\n                    </Form.Control.Feedback>\\n                  </Form.Group>\\n        \\n                  <Row className=\\\"mt-3\\\">\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"password\\\">\\n                        <Form.Label>Password</Form.Label>\\n                        <Form.Control\\n                          type=\\\"password\\\"\\n                          name=\\\"password\\\"\\n                          value={formData.password}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.password}\\n                        />\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.password}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"confirmPassword\\\">\\n                        <Form.Label>Confirm Password</Form.Label>\\n                        <Form.Control\\n                          type=\\\"password\\\"\\n                          name=\\\"confirmPassword\\\"\\n                          value={formData.confirmPassword}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.confirmPassword}\\n                        />\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.confirmPassword}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                  </Row>\\n        \\n                  <Row className=\\\"mt-3\\\">\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"sex\\\">\\n                        <Form.Label>Sex</Form.Label>\\n                        <Form.Select\\n                          name=\\\"sex\\\"\\n                          value={formData.sex}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.sex}\\n                        >\\n                          <option value=\\\"\\\">Select</option>\\n                          <option value=\\\"male\\\">Male</option>\\n                          <option value=\\\"female\\\">Female</option>\\n                          <option value=\\\"other\\\">Other</option>\\n                        </Form.Select>\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.sex}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                    <Col sm={6}>\\n                      <Form.Group controlId=\\\"country\\\">\\n                        <Form.Label>Country</Form.Label>\\n                        <Form.Control\\n                          type=\\\"text\\\"\\n                          name=\\\"country\\\"\\n                          value={formData.country}\\n                          onChange={handleChange}\\n                          isInvalid={!!errors.country}/>\\n                        <Form.Control.Feedback type=\\\"invalid\\\">\\n                          {errors.country}\\n                        </Form.Control.Feedback>\\n                      </Form.Group>\\n                    </Col>\\n                  </Row>\\n        \\n                  <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n                    Register\\n                  </Button>\\n                </Form>\\n              </Card>\\n        \\n              <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\" color=\\\"\\\">\\n                <Toast\\n                  onClose={() => setShowToast(false)}\\n                  show={showToast}\\n                  delay={3000}\\n                  autohide>\\n                  <Toast.Header>\\n                    <strong className=\\\"me-auto\\\">Success</strong>\\n                  </Toast.Header>\\n                  <Toast.Body>{toastMessage}</Toast.Body>\\n                </Toast>\\n              </ToastContainer>\\n            </div>\\n          );\\n        };\\n\\nexport default RegisterForm;\\n        \\n\",\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\nimport {useNavigate} from \\\"react-router-dom\\\";\\n\\nconst ForgotPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    email: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const navigate = useNavigate();\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      navigate('/reset-password'); \\n      /*setShowToast(true);\\n      setToastMessage('Password reset email sent!');*/\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Forgot Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"email\\\">\\n            <Form.Label>Email</Form.Label>\\n            <Form.Control\\n              type=\\\"email\\\"\\n              name=\\\"email\\\"\\n              value={formData.email}\\n              onChange={handleChange}\\n              isInvalid={!!errors.email}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.email}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Forgot Password\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ForgotPasswordForm;\\n\",\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\n\\nconst ResetPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    newPassword: '',\\n    confirmPassword: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n\\n    if (!formData.newPassword) {\\n      newErrors.newPassword = 'New password is required';\\n    } else if (formData.newPassword.length < 8) {\\n      newErrors.newPassword = 'Password must be at least 8 characters';\\n    }\\n\\n    if (formData.confirmPassword !== formData.newPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Password reset successfully!');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Reset Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"newPassword\\\">\\n            <Form.Label>New Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"newPassword\\\"\\n              value={formData.newPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.newPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.newPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Form.Group controlId=\\\"confirmPassword\\\" className=\\\"mt-3\\\">\\n            <Form.Label>Confirm Password</Form.Label>\\n            <Form.Control\\n              type=\\\"password\\\"\\n              name=\\\"confirmPassword\\\"\\n              value={formData.confirmPassword}\\n              onChange={handleChange}\\n              isInvalid={!!errors.confirmPassword}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.confirmPassword}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Reset Password\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ResetPasswordForm;\\n\",\"import React from \\\"react\\\";\\nimport { Routes, Route } from \\\"react-router-dom\\\";\\nimport ForgotPassword from \\\"./ForgotPassword\\\";\\nimport ResetPassword from \\\"./ResetPassword\\\";\\n\\nconst RoutesHandler = () => {\\n  return (\\n    <Routes>\\n      <Route path=\\\"/\\\" element={<ForgotPassword/>} />\\n      <Route path=\\\"/reset-password\\\" element={<ResetPassword/>} />\\n    </Routes>\\n  );\\n};\\n\\nexport default RoutesHandler;\\n\",\"import './App.css';\\nimport React from 'react';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport RegisterForm from './components/Register';\\nimport ForgotPasswordForm from './components/ForgotPassword';\\nimport ResetPasswordForm from './components/ResetPassword';\\nimport RoutesHandler from './components/RoutesHandler';\\nimport { Router } from 'react-router-dom';\\n\\nfunction App() {\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <Router>\\n      <RoutesHandler>\\n        <ForgotPasswordForm/>\\n      </RoutesHandler>\\n      </Router>\\n\\n          \\n         \\n    </div>\\n\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{19:function(e,a,t){e.exports=t(32)},27:function(e,a,t){},32:function(e,a,t){\"use strict\";t.r(a);var n=t(0),s=t.n(n),r=t(10),l=t.n(r),o=(t(27),t(28),t(38)),c=t(37),m=(t(34),t(11),t(40)),d=t(35),i=t(36);var u=t(39);var w=()=>{const[e,a]=Object(n.useState)({email:\"\"}),[t,r]=Object(n.useState)({}),l=Object(u.d)(),[w,E]=Object(n.useState)(!1),[p,b]=Object(n.useState)(\"\"),P=e=>{const a={};return e.email&&/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e.email)||(a.email=\"Invalid email address\"),a};return s.a.createElement(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\"},s.a.createElement(o.a,{className:\"p-4\",style:{width:\"100%\",maxWidth:\"400px\"}},s.a.createElement(\"h2\",{className:\"text-center mb-4\"},\"Forgot Password\"),s.a.createElement(c.a,{onSubmit:a=>{a.preventDefault();const t=P(e);r(t),0===Object.keys(t).length&&(console.log(\"Form submitted successfully:\",e),l(\"/reset-password\"))}},s.a.createElement(c.a.Group,{controlId:\"email\"},s.a.createElement(c.a.Label,null,\"Email\"),s.a.createElement(c.a.Control,{type:\"email\",name:\"email\",value:e.email,onChange:t=>{const{name:n,value:s}=t.target;a({...e,[n]:s});const l=P({...e,[n]:s});r(l)},isInvalid:!!t.email}),s.a.createElement(c.a.Control.Feedback,{type:\"invalid\"},t.email)),s.a.createElement(m.a,{className:\"mt-4 w-100\",variant:\"primary\",type:\"submit\"},\"Forgot Password\"))),s.a.createElement(d.a,{position:\"top-end\",className:\"p-3\"},s.a.createElement(i.a,{onClose:()=>E(!1),show:w,delay:3e3,autohide:!0},s.a.createElement(i.a.Header,null,s.a.createElement(\"strong\",{className:\"me-auto\"},\"Success\")),s.a.createElement(i.a.Body,null,p))))};var E=()=>{const[e,a]=Object(n.useState)({newPassword:\"\",confirmPassword:\"\"}),[t,r]=Object(n.useState)({}),[l,u]=Object(n.useState)(!1),[w,E]=Object(n.useState)(\"\"),p=t=>{const{name:n,value:s}=t.target;a({...e,[n]:s});const l=b({...e,[n]:s});r(l)},b=e=>{const a={};return e.newPassword?e.newPassword.length<8&&(a.newPassword=\"Password must be at least 8 characters\"):a.newPassword=\"New password is required\",e.confirmPassword!==e.newPassword&&(a.confirmPassword=\"Passwords do not match\"),a};return s.a.createElement(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\"},s.a.createElement(o.a,{className:\"p-4\",style:{width:\"100%\",maxWidth:\"400px\"}},s.a.createElement(\"h2\",{className:\"text-center mb-4\"},\"Reset Password\"),s.a.createElement(c.a,{onSubmit:a=>{a.preventDefault();const t=b(e);r(t),0===Object.keys(t).length&&(console.log(\"Form submitted successfully:\",e),u(!0),E(\"Password reset successfully!\"))}},s.a.createElement(c.a.Group,{controlId:\"newPassword\"},s.a.createElement(c.a.Label,null,\"New Password\"),s.a.createElement(c.a.Control,{type:\"password\",name:\"newPassword\",value:e.newPassword,onChange:p,isInvalid:!!t.newPassword}),s.a.createElement(c.a.Control.Feedback,{type:\"invalid\"},t.newPassword)),s.a.createElement(c.a.Group,{controlId:\"confirmPassword\",className:\"mt-3\"},s.a.createElement(c.a.Label,null,\"Confirm Password\"),s.a.createElement(c.a.Control,{type:\"password\",name:\"confirmPassword\",value:e.confirmPassword,onChange:p,isInvalid:!!t.confirmPassword}),s.a.createElement(c.a.Control.Feedback,{type:\"invalid\"},t.confirmPassword)),s.a.createElement(m.a,{className:\"mt-4 w-100\",variant:\"primary\",type:\"submit\"},\"Reset Password\"))),s.a.createElement(d.a,{position:\"top-end\",className:\"p-3\"},s.a.createElement(i.a,{onClose:()=>u(!1),show:l,delay:3e3,autohide:!0},s.a.createElement(i.a.Header,null,s.a.createElement(\"strong\",{className:\"me-auto\"},\"Success\")),s.a.createElement(i.a.Body,null,w))))};var p=()=>s.a.createElement(u.c,null,s.a.createElement(u.a,{path:\"/\",element:s.a.createElement(w,null)}),s.a.createElement(u.a,{path:\"/reset-password\",element:s.a.createElement(E,null)}));var b=function(){return s.a.createElement(\"div\",{className:\"App\"},s.a.createElement(u.b,null,s.a.createElement(p,null,s.a.createElement(w,null))))};l.a.createRoot(document.getElementById(\"root\")).render(s.a.createElement(s.a.StrictMode,null,s.a.createElement(b,null)))}},[[19,1,2]]]);","extractedComments":[]}