{"map":"{\"version\":3,\"sources\":[\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/Register.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/components/ForgotPassword.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/App.js\",\"/home/berrybug/Desktop/ShaRecipe/sharecipe_app/frontend/src/index.js\"],\"names\":[\"RegisterForm\",\"ForgotPasswordForm\",\"formData\",\"setFormData\",\"useState\",\"email\",\"errors\",\"setErrors\",\"showToast\",\"setShowToast\",\"toastMessage\",\"setToastMessage\",\"validate\",\"newErrors\",\"test\",\"React\",\"createElement\",\"className\",\"Card\",\"style\",\"width\",\"maxWidth\",\"Form\",\"onSubmit\",\"e\",\"preventDefault\",\"Object\",\"keys\",\"length\",\"console\",\"log\",\"Group\",\"controlId\",\"Label\",\"Control\",\"type\",\"name\",\"value\",\"onChange\",\"target\",\"[object Object]\",\"isInvalid\",\"Feedback\",\"Button\",\"variant\",\"onClick\",\"Navigate\",\"ToastContainer\",\"position\",\"Toast\",\"onClose\",\"show\",\"delay\",\"autohide\",\"Header\",\"Body\",\"App\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"wQAiPeA,YCxJAC,IAAAA,EArFYA,KACzB,MAAOC,EAAUC,GAAeC,OAAAA,EAAAA,SAAAA,CAAS,CACvCC,MAAO,MAGFC,EAAQC,GAAaH,OAAAA,EAAAA,SAAAA,CAAS,KAC9BI,EAAWC,GAAgBL,OAAAA,EAAAA,SAAAA,EAAS,IACpCM,EAAcC,GAAmBP,OAAAA,EAAAA,SAAAA,CAAS,IAY3CQ,EAAYV,IAChB,MAAMW,EAAY,GAOlB,OAJKX,EAASG,OADK,6BACgBS,KAAKZ,EAASG,SAC/CQ,EAAUR,MAAQ,yBAGbQ,GAgBT,OACEE,EAAAA,EAAAC,cAAA,MAAA,CAAKC,UAAU,+DACbF,EAAAA,EAAAC,cAACE,EAAAA,EAAI,CAACD,UAAU,MAAME,MAAO,CAAEC,MAAO,OAAQC,SAAU,UACtDN,EAAAA,EAAAC,cAAA,KAAA,CAAIC,UAAU,oBAAmB,mBACjCF,EAAAA,EAAAC,cAACM,EAAAA,EAAI,CAACC,SAjBUC,IACpBA,EAAEC,iBACF,MAAMZ,EAAYD,EAASV,GAC3BK,EAAUM,GAE4B,IAAlCa,OAAOC,KAAKd,GAAWe,SAEzBC,QAAQC,IAAI,+BAAgC5B,GAC5CO,GAAa,GACbE,EAAgB,iCASZI,EAAAA,EAAAC,cAACM,EAAAA,EAAKS,MAAK,CAACC,UAAU,SACpBjB,EAAAA,EAAAC,cAACM,EAAAA,EAAKW,MAAK,KAAC,SACZlB,EAAAA,EAAAC,cAACM,EAAAA,EAAKY,QAAO,CACXC,KAAK,QACLC,KAAK,QACLC,MAAOnC,EAASG,MAChBiC,SA7CUd,IACpB,MAAMY,KAAEA,EAAIC,MAAEA,GAAUb,EAAEe,OAE1BpC,EAAY,IAAKD,EAAUsC,CAACJ,GAAOC,IAGnC,MAAMxB,EAAYD,EAAS,IAAKV,EAAUsC,CAACJ,GAAOC,IAClD9B,EAAUM,IAuCA4B,YAAanC,EAAOD,QAEtBU,EAAAA,EAAAC,cAACM,EAAAA,EAAKY,QAAQQ,SAAQ,CAACP,KAAK,WACzB7B,EAAOD,QAGVU,EAAAA,EAAAC,cAAC2B,EAAAA,EAAM,CAAC1B,UAAU,aAAa2B,QAAQ,UAAUT,KAAK,SAASU,QAASA,IAAMC,OAAAA,EAAAA,EAAAA,CAAS,mBAAmB,qBAOhH/B,EAAAA,EAAAC,cAAC+B,EAAAA,EAAc,CAACC,SAAS,UAAU/B,UAAU,OAC3CF,EAAAA,EAAAC,cAACiC,EAAAA,EAAK,CACJC,QAASA,IAAMzC,GAAa,GAC5B0C,KAAM3C,EACN4C,MAAO,IACPC,UAAQ,GAERtC,EAAAA,EAAAC,cAACiC,EAAAA,EAAMK,OAAM,KACXvC,EAAAA,EAAAC,cAAA,SAAA,CAAQC,UAAU,WAAU,YAE9BF,EAAAA,EAAAC,cAACiC,EAAAA,EAAMM,KAAI,KAAE7C,yBC7DR8C,IAAAA,EAXf,WAEE,OACEzC,EAAAA,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbF,EAAAA,EAAAC,cAACf,EAAkB,QCTZwD,EAAAA,EAASC,WAAWC,SAASC,eAAe,SACpDC,OACH9C,EAAAA,EAAAC,cAACD,EAAAA,EAAM+C,WAAU,KACf/C,EAAAA,EAAAC,cAACwC,EAAG\",\"sourcesContent\":[\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Col, Row, Toast, ToastContainer, Card } from \\\"react-bootstrap\\\";\\nimport { FaGoogle } from 'react-icons/fa';\\n\\nconst RegisterForm = () => {\\n  const [formData, setFormData] = useState({\\n    firstName: '',\\n    lastName: '',\\n    email: '',\\n    password: '',\\n    confirmPassword: '',\\n    sex: '',\\n    country: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    // Prevent non-alphabetic characters for first name, last name, and country\\n    if (\\n      name === 'firstName' ||\\n      name === 'lastName' ||\\n      name === 'country'\\n    ) {\\n      const alphabeticValue = value.replace(/[^a-zA-Z\\\\s]+/g, '');\\n      setFormData({ ...formData, [name]: alphabeticValue });\\n    } else {\\n      setFormData({ ...formData, [name]: value });\\n    }\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n  \\n    // Check for required fields and validate format\\n    if (!formData.firstName.trim()) {\\n      newErrors.firstName = 'First name is required';\\n    }\\n    if (!formData.lastName.trim()) {\\n      newErrors.lastName = 'Last name is required';\\n    }\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n  \\n    // Password and confirm password validation\\n    if (!formData.password || formData.password.length < 8) {\\n      newErrors.password = 'Password must be at least 8 characters long';\\n    }\\n    if (formData.password !== formData.confirmPassword) {\\n      newErrors.confirmPassword = 'Passwords do not match';\\n    }\\n  \\n    if (!formData.sex) {\\n      newErrors.sex = 'Please select your sex';\\n    }\\n  \\n    if (!formData.country.trim()) {\\n      newErrors.country = 'Please select your country';\\n    }\\n  \\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n  \\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Registration successful!');\\n    }\\n  };\\n  \\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '600px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Join us!</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Row>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"firstName\\\">\\n                <Form.Label>First Name</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"firstName\\\"\\n                  value={formData.firstName}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.firstName}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.firstName}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"lastName\\\">\\n                <Form.Label>Last Name</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"lastName\\\"\\n                  value={formData.lastName}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.lastName}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.lastName}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Form.Group controlId=\\\"email\\\" className=\\\"mt-3\\\">\\n            <Form.Label>Email</Form.Label>\\n            <Form.Control\\n              type=\\\"email\\\"\\n              name=\\\"email\\\"\\n              value={formData.email}\\n              onChange={handleChange}\\n              isInvalid={!!errors.email}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.email}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n\\n          <Row className=\\\"mt-3\\\">\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"password\\\">\\n                <Form.Label>Password</Form.Label>\\n                <Form.Control\\n                  type=\\\"password\\\"\\n                  name=\\\"password\\\"\\n                  value={formData.password}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.password}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.password}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"confirmPassword\\\">\\n                <Form.Label>Confirm Password</Form.Label>\\n                <Form.Control\\n                  type=\\\"password\\\"\\n                  name=\\\"confirmPassword\\\"\\n                  value={formData.confirmPassword}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.confirmPassword}\\n                />\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.confirmPassword}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Row className=\\\"mt-3\\\">\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"sex\\\">\\n                <Form.Label>Sex</Form.Label>\\n                <Form.Select\\n                  name=\\\"sex\\\"\\n                  value={formData.sex}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.sex}\\n                >\\n                  <option value=\\\"\\\">Select</option>\\n                  <option value=\\\"male\\\">Male</option>\\n                  <option value=\\\"female\\\">Female</option>\\n                  <option value=\\\"other\\\">Other</option>\\n                </Form.Select>\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.sex}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n            <Col sm={6}>\\n              <Form.Group controlId=\\\"country\\\">\\n                <Form.Label>Country</Form.Label>\\n                <Form.Control\\n                  type=\\\"text\\\"\\n                  name=\\\"country\\\"\\n                  value={formData.country}\\n                  onChange={handleChange}\\n                  isInvalid={!!errors.country}/>\\n                <Form.Control.Feedback type=\\\"invalid\\\">\\n                  {errors.country}\\n                </Form.Control.Feedback>\\n              </Form.Group>\\n            </Col>\\n          </Row>\\n\\n          <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\">\\n            Register\\n          </Button>\\n\\n          {/* Login link */}\\n          <p className=\\\"text-center mt-3\\\">\\n            Already have an account? <a href=\\\"/login\\\" className=\\\"text-primary\\\">Login</a>\\n          </p>\\n\\n          {/* Divider with Google sign-up */}\\n          <hr />\\n          <Button className=\\\"w-100 mt-2 btn-light border\\\" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\\n            <FaGoogle className=\\\"me-2\\\" /> Sign up with Google\\n          </Button>\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide>\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default RegisterForm;\\n\",\"import React, { useState } from \\\"react\\\";\\nimport { Form, Button, Toast, ToastContainer, Card,} from \\\"react-bootstrap\\\";\\nimport { Navigate } from \\\"react-router-dom\\\";\\n\\nconst ForgotPasswordForm = () => {\\n  const [formData, setFormData] = useState({\\n    email: '',\\n  });\\n\\n  const [errors, setErrors] = useState({});\\n  const [showToast, setShowToast] = useState(false);\\n  const [toastMessage, setToastMessage] = useState('');\\n\\n  const handleChange = (e) => {\\n    const { name, value } = e.target;\\n\\n    setFormData({ ...formData, [name]: value });\\n\\n    // Update errors in real-time\\n    const newErrors = validate({ ...formData, [name]: value });\\n    setErrors(newErrors);\\n  };\\n\\n  const validate = (formData) => {\\n    const newErrors = {};\\n    \\n    const emailRegex = /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/;\\n    if (!formData.email || !emailRegex.test(formData.email)) {\\n      newErrors.email = 'Invalid email address';\\n    }\\n\\n    return newErrors;\\n  };\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    const newErrors = validate(formData);\\n    setErrors(newErrors);\\n\\n    if (Object.keys(newErrors).length === 0) {\\n      // Handle form submission (e.g., send data to server)\\n      console.log('Form submitted successfully:', formData);\\n      setShowToast(true);\\n      setToastMessage('Password reset email sent!');\\n    }\\n  };\\n\\n  return (\\n    <div className=\\\"d-flex justify-content-center align-items-center min-vh-100\\\">\\n      <Card className=\\\"p-4\\\" style={{ width: '100%', maxWidth: '400px' }}>\\n        <h2 className=\\\"text-center mb-4\\\">Forgot Password</h2>\\n        <Form onSubmit={handleSubmit}>\\n          <Form.Group controlId=\\\"email\\\">\\n            <Form.Label>Email</Form.Label>\\n            <Form.Control\\n              type=\\\"email\\\"\\n              name=\\\"email\\\"\\n              value={formData.email}\\n              onChange={handleChange}\\n              isInvalid={!!errors.email}\\n            />\\n            <Form.Control.Feedback type=\\\"invalid\\\">\\n              {errors.email}\\n            </Form.Control.Feedback>\\n          </Form.Group>\\n            <Button className=\\\"mt-4 w-100\\\" variant=\\\"primary\\\" type=\\\"submit\\\" onClick={() => Navigate('reset-password')}>\\n              Forgot Password\\n          </Button>\\n\\n        </Form>\\n      </Card>\\n\\n      <ToastContainer position=\\\"top-end\\\" className=\\\"p-3\\\">\\n        <Toast\\n          onClose={() => setShowToast(false)}\\n          show={showToast}\\n          delay={3000}\\n          autohide\\n        >\\n          <Toast.Header>\\n            <strong className=\\\"me-auto\\\">Success</strong>\\n          </Toast.Header>\\n          <Toast.Body>{toastMessage}</Toast.Body>\\n        </Toast>\\n      </ToastContainer>\\n    </div>\\n  );\\n};\\n\\nexport default ForgotPasswordForm;\\n\",\"import './App.css';\\nimport React from 'react';\\nimport 'bootstrap/dist/css/bootstrap.min.css';\\nimport RegisterForm from './components/Register';\\nimport ForgotPasswordForm from './components/ForgotPassword';\\nimport ResetPasswordForm from './components/ResetPassword';\\nimport Home from './pages/Homepage'\\nimport { Route,Router, Routes } from 'react-router-dom';\\n\\n\\nfunction App() {\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <ForgotPasswordForm/>\\n     \\n    </div>\\n\\n  );\\n}\\n\\nexport default App;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport App from './App';\\n\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{45:function(e,a,t){e.exports=t(60)},53:function(e,a,t){},60:function(e,a,t){\"use strict\";t.r(a);var n=t(0),l=t.n(n),s=t(40),r=t.n(s),c=(t(53),t(54),t(65)),m=t(64),o=(t(62),t(41),t(37)),i=t(63),u=t(66);t(43);var d=t(67);var p=()=>{const[e,a]=Object(n.useState)({email:\"\"}),[t,s]=Object(n.useState)({}),[r,p]=Object(n.useState)(!1),[E,b]=Object(n.useState)(\"\"),v=e=>{const a={};return e.email&&/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(e.email)||(a.email=\"Invalid email address\"),a};return l.a.createElement(\"div\",{className:\"d-flex justify-content-center align-items-center min-vh-100\"},l.a.createElement(c.a,{className:\"p-4\",style:{width:\"100%\",maxWidth:\"400px\"}},l.a.createElement(\"h2\",{className:\"text-center mb-4\"},\"Forgot Password\"),l.a.createElement(m.a,{onSubmit:a=>{a.preventDefault();const t=v(e);s(t),0===Object.keys(t).length&&(console.log(\"Form submitted successfully:\",e),p(!0),b(\"Password reset email sent!\"))}},l.a.createElement(m.a.Group,{controlId:\"email\"},l.a.createElement(m.a.Label,null,\"Email\"),l.a.createElement(m.a.Control,{type:\"email\",name:\"email\",value:e.email,onChange:t=>{const{name:n,value:l}=t.target;a({...e,[n]:l});const r=v({...e,[n]:l});s(r)},isInvalid:!!t.email}),l.a.createElement(m.a.Control.Feedback,{type:\"invalid\"},t.email)),l.a.createElement(o.a,{className:\"mt-4 w-100\",variant:\"primary\",type:\"submit\",onClick:()=>Object(d.a)(\"reset-password\")},\"Forgot Password\"))),l.a.createElement(i.a,{position:\"top-end\",className:\"p-3\"},l.a.createElement(u.a,{onClose:()=>p(!1),show:r,delay:3e3,autohide:!0},l.a.createElement(u.a.Header,null,l.a.createElement(\"strong\",{className:\"me-auto\"},\"Success\")),l.a.createElement(u.a.Body,null,E))))};t(42),t(34),t(25);var E=function(){return l.a.createElement(\"div\",{className:\"App\"},l.a.createElement(p,null))};r.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(E,null)))}},[[45,1,2]]]);","extractedComments":[]}